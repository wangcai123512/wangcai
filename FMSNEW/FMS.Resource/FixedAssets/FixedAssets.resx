<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AssetsCost" xml:space="preserve">
    <value>固定资产原值</value>
  </data>
  <data name="AssetsGroup" xml:space="preserve">
    <value>资产分类</value>
  </data>
  <data name="ConfirmScrap" xml:space="preserve">
    <value>确认报废此资产？</value>
  </data>
  <data name="ConfirmSell" xml:space="preserve">
    <value>确认出售此资产？</value>
  </data>
  <data name="CurrCost" xml:space="preserve">
    <value>当前资产值</value>
  </data>
  <data name="CurrentValue" xml:space="preserve">
    <value>剩余价值</value>
  </data>
  <data name="DepreciationMethod" xml:space="preserve">
    <value>折旧方法</value>
  </data>
  <data name="InTheLibrary" xml:space="preserve">
    <value>在库</value>
  </data>
  <data name="Lend" xml:space="preserve">
    <value>借出</value>
  </data>
  <data name="Life" xml:space="preserve">
    <value>使用寿命(年)</value>
  </data>
  <data name="No" xml:space="preserve">
    <value>资产编号</value>
  </data>
  <data name="PersonInCharge" xml:space="preserve">
    <value>负责人</value>
  </data>
  <data name="PurchaseDate" xml:space="preserve">
    <value>购置日期</value>
  </data>
  <data name="Receiver" xml:space="preserve">
    <value>接收人</value>
  </data>
  <data name="Register" xml:space="preserve">
    <value>注册资产</value>
  </data>
  <data name="RegisterDate" xml:space="preserve">
    <value>注册日期</value>
  </data>
  <data name="Return" xml:space="preserve">
    <value>退还</value>
  </data>
  <data name="SalvageRate" xml:space="preserve">
    <value>残值率(%)</value>
  </data>
  <data name="SalvageValue" xml:space="preserve">
    <value>固定资产净残值</value>
  </data>
  <data name="Scrap" xml:space="preserve">
    <value>报废</value>
  </data>
  <data name="ScrapDate" xml:space="preserve">
    <value>报废日期</value>
  </data>
  <data name="ScrapType" xml:space="preserve">
    <value>注销类型</value>
  </data>
  <data name="Sell" xml:space="preserve">
    <value>出售</value>
  </data>
  <data name="Stat" xml:space="preserve">
    <value>状态</value>
  </data>
  <data name="Using" xml:space="preserve">
    <value>使用中</value>
  </data>
</root>